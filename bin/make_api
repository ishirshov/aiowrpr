#!/usr/bin/env python3
import os
import json
import argparse


def create_directory(path: str, imports: object):
    make_package(path, imports)

    if isinstance(imports, set):
        for pkg_dir in imports:
            make_package(os.path.join(path, pkg_dir))
    elif isinstance(imports, dict):
        for pkg_dir, i in imports.items():
            create_directory(os.path.join(path, pkg_dir), i)
    elif isinstance(imports, list):
        for i in imports:
            with open(os.path.join(path, i), 'w') as f:
                f.write(
"""# -*- coding: utf-8 -*-
import aiowrpr
from aiowrpr import routes

import aiohttp
from aiohttp import web

from marshmallow import fields
"""
                )
    else:
        raise RuntimeError("Unexpected structure type of API")


def make_package(path: str, imports: list = None):
    if imports is None:
        imports = []

    if not os.path.exists(path):
        os.mkdir(path)

    with open(os.path.join(path, '__init__.py'), 'w') as f:
        f.write(
"""# -*- coding: utf-8 -*-
%s
""" % '\n'.join(['from . import %s' % f.replace('.py', '') for f in imports])
        )


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("--project_name", type=str, required=True)
    parser.add_argument("--dir_path", type=str, required=False, default=os.getcwd())
    parser.add_argument("--spec_file", type=str, required=True)

    args = parser.parse_args()

    # Creates a directory of API
    if not os.path.exists(args.dir_path):
        os.makedirs(args.dir_path)
    
    project_path = os.path.join(args.dir_path, args.project_name)
    if not os.path.exists(project_path):
        os.mkdir(project_path)

    # Creates an package imports
    with open(args.spec_file, 'rb') as f:
        api_structure = {
            'api': json.loads(f.read())
        }

    for pkg_dir, imports in api_structure.items():
        create_directory(os.path.join(project_path, pkg_dir), imports)

    # Make entrypoint
    with open(os.path.join(project_path, 'main.py'), 'w') as f:
        f.write(
"""# -*- coding: utf-8 -*-

import aiowrpr
from aiowrpr import routes

import aiohttp
from aiohttp import web

import api


if __name__ == "__main__":
    app = aiohttp.web.Application()
    app.router.add_routes(routes.ROUTE_TABLE)
    aiohttp.web.run_app(app, host="127.0.0.1", port=8080)
"""
        )


if __name__ == "__main__":
    main()
